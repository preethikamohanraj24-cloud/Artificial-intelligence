import heapq

class PuzzleState:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.zero_pos = self.board.index(0)

    def __eq__(self, other):
        return self.board == other.board

    def __lt__(self, other):
        return (self.moves + self.heuristic()) < (other.moves + other.heuristic())

    def heuristic(self):
        # Manhattan distance
        distance = 0
        for idx, value in enumerate(self.board):
            if value == 0:
                continue
            goal_row, goal_col = divmod(value - 1, 3)
            curr_row, curr_col = divmod(idx, 3)
            distance += abs(goal_row - curr_row) + abs(goal_col - curr_col)
        return distance

    def is_goal(self):
        return self.board == [1,2,3,4,5,6,7,8,0]

    def neighbors(self):
        neighbor_states = []
        swaps = []
        row, col = divmod(self.zero_pos, 3)
        if row > 0: swaps.append(self.zero_pos - 3)      # Up
        if row < 2: swaps.append(self.zero_pos + 3)      # Down
        if col > 0: swaps.append(self.zero_pos - 1)      # Left
        if col < 2: swaps.append(self.zero_pos + 1)      # Right
        for swap_pos in swaps:
            new_board = self.board[:]
            new_board[self.zero_pos], new_board[swap_pos] = new_board[swap_pos], new_board[self.zero_pos]
            neighbor_states.append(PuzzleState(new_board, self.moves + 1, self))
        return neighbor_states

    def board_tuple(self):
        return tuple(self.board)

    def path(self):
        node, p = self, []
        while node:
            p.append(node.board)
            node = node.previous
        return p[::-1]

def solve_8_puzzle(start_board):
    start = PuzzleState(start_board)
    if not is_solvable(start_board):
        return None

    open_set = []
    heapq.heappush(open_set, (start.moves + start.heuristic(), start))
    closed_set = set()

    while open_set:
        _, current = heapq.heappop(open_set)
        if current.is_goal():
            return current.path()
        closed_set.add(current.board_tuple())
        for neighbor in current.neighbors():
            if neighbor.board_tuple() not in closed_set:
                heapq.heappush(open_set, (neighbor.moves + neighbor.heuristic(), neighbor))
    return None

def is_solvable(board):
    inv_count = 0
    for i in range(8):
        for j in range(i+1, 9):
            if board[i] != 0 and board[j] != 0 and board[i] > board[j]:
                inv_count += 1
    return inv_count % 2 == 0

def print_board(board):
    for i in range(0, 9, 3):
        print(board[i:i+3])
    print()

if __name__ == "__main__":
    # Example input, you can change this
    # 0 represents the blank tile
    start_board = [1, 2, 3, 4, 0, 6, 7, 5, 8]
    print("Initial State:")

