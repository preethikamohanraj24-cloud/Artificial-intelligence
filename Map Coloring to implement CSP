# Map Coloring Problem using Backtracking (CSP)

# Define the map (adjacency list)
neighbors = {
    "WA": ["NT", "SA"],
    "NT": ["WA", "SA", "Q"],
    "SA": ["WA", "NT", "Q", "NSW", "V"],
    "Q":  ["NT", "SA", "NSW"],
    "NSW":["Q", "SA", "V"],
    "V":  ["SA", "NSW"],
    "T":  []  # Tasmania has no borders
}

# Available colors
colors = ["Red", "Green", "Blue"]

def is_valid(node, color, assignment):
    """Check if assigning this color to node is valid."""
    for neighbor in neighbors[node]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True

def backtrack(assignment):
    """Backtracking search for CSP solution."""
    # If all nodes are assigned a color, return solution
    if len(assignment) == len(neighbors):
        return assignment

    # Select an unassigned region
    unassigned = [node for node in neighbors if node not in assignment]
    node = unassigned[0]

    for color in colors:
        if is_valid(node, color, assignment):
            assignment[node] = color
            result = backtrack(assignment)
            if result:
                return result
            # Backtrack
            del assignment[node]

    return None

if __name__ == "__main__":
    solution = backtrack({})
    if solution:
        print("Map Coloring Solution:")
        for region, color in solution.items():
            print(f"{region}: {color}")
    else:
        print("No solution found.")
