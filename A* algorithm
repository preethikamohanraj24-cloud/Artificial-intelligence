from heapq import heappop, heappush

def a_star(graph, start, goal, heuristic):
    # Priority queue: (f, g, node, path)
    pq = []
    heappush(pq, (heuristic[start], 0, start, [start]))
    
    visited = set()
    
    while pq:
        f, g, node, path = heappop(pq)
        
        if node == goal:
            return path, g   # Found the goal
        
        if node in visited:
            continue
        visited.add(node)
        
        for neighbor, cost in graph[node]:
            if neighbor not in visited:
                g_new = g + cost
                f_new = g_new + heuristic[neighbor]
                heappush(pq, (f_new, g_new, neighbor, path + [neighbor]))
    
    return None, float("inf")

# Example usage
if __name__ == "__main__":
    # Graph represented as adjacency list: node -> [(neighbor, cost), ...]
    graph = {
        'A': [('B', 1), ('C', 3)],
        'B': [('D', 3), ('E', 1)],
        'C': [('F', 5)],
        'D': [('G', 2)],
        'E': [('G', 1)],
        'F': [('G', 2)],
        'G': []
    }
    
    # Heuristic values (straight-line distance to goal 'G')
    heuristic = {
        'A': 7,
        'B': 6,
        'C': 4,
        'D': 2,
        'E': 1,
        'F': 3,
        'G': 0
    }
    
    path, cost = a_star(graph, 'A', 'G', heuristic)
    print("Optimal Path:", path)
    print("Total Cost:", cost)
