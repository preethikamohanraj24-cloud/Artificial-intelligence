import itertools

def travelling_salesman(distance_matrix, start=0):
    n = len(distance_matrix)
    cities = list(range(n))
    cities.remove(start)

    min_path = None
    min_cost = float('inf')

    for perm in itertools.permutations(cities):
        path = [start] + list(perm) + [start]  # full tour
        cost = sum(distance_matrix[path[i]][path[i+1]] for i in range(len(path)-1))

        if cost < min_cost:
            min_cost = cost
            min_path = path

    return min_path, min_cost

if __name__ == "__main__":
    # Example: 4 cities (symmetric matrix)
    distance_matrix = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]

    path, cost = travelling_salesman(distance_matrix)
    print("Optimal Path:", path)
    print("Minimum Cost:", cost)
