N = 8  # size of chessboard (8x8)

def print_solution(board):
    """Prints the board with queens placed."""
    for row in board:
        print(" ".join("Q" if x == 1 else "." for x in row))
    print("\n")

def is_safe(board, row, col):
    """Check if it's safe to place a queen at board[row][col]."""
    # Check this column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper-right diagonal
    for i, j in zip(range(row-1, -1, -1), range(col+1, N)):
        if board[i][j] == 1:
            return False

    return True

def solve(board, row):
    """Use backtracking to place queens row by row."""
    if row == N:
        print_solution(board)  # Found one solution
        return True

    res = False
    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place queen
            res = solve(board, row + 1) or res
            board[row][col] = 0  # Backtrack

    return res

def solve_n_queens():
    board = [[0] * N for _ in range(N)]
    if not solve(board, 0):
        print("No solution exists")

if __name__ == "__main__":
    solve_n_queens()
